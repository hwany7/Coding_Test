import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
	static class Vertex implements Comparable<Vertex> {
      int no, totalDistance;

      public Vertex(int no, int totalDistance) {
        this.no = no;
        this.totalDistance = totalDistance;
      }

      @Override
      public int compareTo(Vertex o) {
      	return this.totalDistance - o.totalDistance;
      }
  }

    public int solution(int N, int[][] road, int K) {
      int answer = dijkstra(road, N, K);
      return answer;
    }

		/** */
     private int dijkstra(int[][] road, int N, int K) {
     	int[][] matrix = new int[N + 1][N + 1];
          for (int i = 0; i < road.length; i++) {
            if (matrix[road[i][0]][road[i][1]] == 0) {
              matrix[road[i][0]][road[i][1]] = road[i][2];
              matrix[road[i][1]][road[i][0]] = road[i][2];
            } else {
              if (matrix[road[i][0]][road[i][1]] > road[i][2]) {
                matrix[road[i][0]][road[i][1]] = road[i][2];
                matrix[road[i][1]][road[i][0]] = road[i][2];
              }
            }
      	  }

          int start = 1;
          int end = N;
          final int INFINITY = Integer.MAX_VALUE;

          int[] distance = new int[N + 1];
          boolean[] visited = new boolean[N + 1];

          PriorityQueue<Vertex> pQueue = new PriorityQueue<Vertex>();

          Arrays.fill(distance, INFINITY);
          distance[start] = 0;
          pQueue.offer(new Vertex(start, distance[start]));

          Vertex current = null;

          while (!pQueue.isEmpty()) {
            current = pQueue.poll();

            visited[current.no] = true;
            for (int j = 1; j <= N; j++) {
              if (!visited[j] && matrix[current.no][j] != 0
              && distance[j] > current.totalDistance + matrix[current.no][j]) {
                  distance[j] = current.totalDistance + matrix[current.no][j];
                  pQueue.offer(new Vertex(j, distance[j]));
              }
            }
          }

		int res = 0;

        for (int i = 1; i <= N; i++) {
          if (distance[i] <= K)
           res++;
          }
        return res;
	}
 }