package basic.inflearn;

import java.util.ArrayList;
import java.util.Scanner;

public class Main {

    /*
     * DFS(vertex):
     *      if vertex == n:
     *          answer++
     *      else:
     *          for x in graph.get(vertex):
     *              if check[x] == 0:
     *                  check[x] <- 1
     *                  DFS(x)
     *                  check[x] <- 0
     */

    static int n;
    static int m;
    static int answer = 0;
//    static int[][] graph;
    static ArrayList<ArrayList<Integer>> graph;
    static int[] check;

    public void DFS(int vertex){
        if(vertex == n) answer++;
        else{
            for(int x : graph.get(vertex)){
                if(check[x] == 0){
                    check[x] = 1;
                    DFS(x);
                    check[x] = 0;
                }
            }
        }
    }

    /***
     * 인접행렬은 정점 번호 n이 크면 클수록
     * 배열의 크기가 커져서 효율성이 떨어진다(for 문을 계속 돌아야 하므로)
     * 따라서 그것을 보완하기 위해서 인접 리스트를 사용해서 인접행렬을 대체한다
     */

    public static void main(String[] args) {

        //Input:    5 9
        //          1 2
        //          1 3
        //          1 4
        //          2 1
        //          2 3
        //          2 5
        //          3 4
        //          4 2
        //          4 5
        //Output:   6

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        n = kb.nextInt();
        m = kb.nextInt();
        graph = new ArrayList<>();
        check = new  int[n+1];

        for(int i=0; i<n+1; i++){
            graph.add(new ArrayList<>());
        }

        for(int i=0; i<m; i++){
            int a = kb.nextInt();
            int b = kb.nextInt();
            graph.get(a).add(b);
        }

        check[1] = 1;
        T.DFS(1);
        System.out.println(answer);

    }
}