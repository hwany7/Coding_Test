import java.util.*;

class Solution {

    int[][] answer;
    int index;

    public int[][] solution(int[][] nodeinfo) {
        ArrayList<Node> list = new ArrayList<>();

        //노드 추가
        for (int i=0; i<nodeinfo.length; i++) {
            list.add(new Node(i+1, nodeinfo[i][0], nodeinfo[i][1]));
        }

        //y내림차순 정렬
        Collections.sort(list);

        //노드연결
        Node root = list.get(0);
        for (int i=0; i<list.size(); i++) {
            nodeConnect(root, list.get(i));
        }

        answer = new int[2][nodeinfo.length];

        //전위순회
        index = 0;
        predorder(root);

        //후위순회
        index = 0;
        postorder(root);

        return answer;
    }

    void predorder (Node n) {
        if (n == null) return;
        else {
            answer[0][index++] = n.data;
            if (n.lt != null) predorder(n.lt);
            if (n.rt != null) predorder(n.rt);
        }
    }

    void postorder (Node n) {
        if(n == null) return;
        else {
            if(n.lt != null) postorder(n.lt);
            if(n.rt != null) postorder(n.rt);
            answer[1][index++] = n.data;
        }
    }

    void nodeConnect(Node p, Node c) {
        if (p != null) {
            if (c.x < p.x) {
                if (p.lt == null) p.lt = c;
                else nodeConnect(p.lt, c);
            }else if (p.x < c.x) {
                if (p.rt == null) p.rt = c;
                else nodeConnect(p.rt, c);
            }
        }
    }

    class Node implements Comparable<Node>{
        int data;
        int x, y;
        Node lt, rt;

        Node (int data, int x, int y) {
            this.data = data;
            this.x = x;
            this.y = y;
        }

        @Override
        public int compareTo (Node o) {
            return o.y - this.y;
        }
    }
}