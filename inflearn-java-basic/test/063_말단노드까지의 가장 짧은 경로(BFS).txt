package basic.inflearn;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Node{
    int data;
    Node lt, rt;

    public Node(int data){
        this.data = data;
        lt = rt = null;
    }
}

public class Main {

    /*
     * DFS(node):
     *      new Queue q
     *      level <-0
     *      q.offer(node)
     *      while q.isNoEmpty():
     *          cur <- q.poll()
     *          if cur.lt==null and cur.rt==null:
     *              return level
     *          if cur.lt != null:
     *              q.offer(cur.lt)
     *          if cur.rt != null:
     *              q.offer(cur.rt)
     *      level++
     */

    Node root;
    public int BFS(Node node) {
        Queue<Node> q = new LinkedList<>();

        int level = 0;
        q.offer(node);

        while (!q.isEmpty()){
            int len = q.size();

            for(int i=0; i<len; i++){
                Node cur = q.poll();
                if(cur.lt==null && cur.rt==null) return level;

                if(cur.lt != null) q.offer(cur.lt);
                if(cur.rt != null) q.offer(cur.rt);
            }
            level++;
        }

        return -1;
    }

    public static void main(String[] args) {

        Main T = new Main();

        T.root = new Node(1);
        T.root.lt = new Node(2);
        T.root.rt = new Node(3);
        T.root.lt.lt = new Node(4);
        T.root.lt.rt = new Node(5);

        System.out.println(T.BFS(T.root));

    }
}