package basic.inflearn;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

    /*
     * new int[] check
     * new int[] dis
     * new ArrayList<ArrayList<Integer>> graph
     *
     * BFS(vertex):
     *      new Queue q
     *      check[vertex] <- 1
     *      dis[vertex] <- 0
     *      q.offer(vertex)
     *      while q.isNotEmpty():
     *          cur <- q.poll()
     *          for x in graph.get(cur):
     *              if check[x] == 0:
     *                  check[x] <- 1
     *                  q.offer(x)
     *                  dis[x] = dix[cur] +1
     */

    static int n;
    static int m;
    static int answer = 0;
    static ArrayList<ArrayList<Integer>> graph;
    static int[] check;
    static int[] dis;

    public void BFS(int vertex){

    }

    public static void main(String[] args) {

        //Input:    6 9
        //          1 3
        //          1 4
        //          2 1
        //          2 5
        //          3 4
        //          4 5
        //          4 6
        //          6 2
        //          6 5
        //Output:   2 : 3
        //          3 : 1
        //          4 : 1
        //          5 : 2
        //          6 : 2

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        n = kb.nextInt();
        m = kb.nextInt();

        graph = new ArrayList<>();
        for(int i=0; i<n+1; i++){
            graph.add(new ArrayList<>());
        }

        check = new int[n+1];
        dis = new int[n+1];
        for(int i=0; i<m; i++){
            int a = kb.nextInt();
            int b = kb.nextInt();
            graph.get(a).add(b);
        }

        T.BFS(1);
        for(int i=2; i<n+1; i++){
            System.out.println(i + " : " + dis[i]);
        }

    }
}