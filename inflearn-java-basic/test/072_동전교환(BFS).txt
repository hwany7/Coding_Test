package basic.inflearn;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

    /*
     * BFS(n, m, arr):
     *      new Queue q
     *
     *      level <- 0
     *      q.offer(0)
     *
     *      while q.isNotEmpty():
     *          len <- q.size()
     *          for i ~ len:
     *              sum <- q.poll
     *              for k ~ arr.length:
     *                  num <- sum + arr[k]
     *                  if num == m:
     *                      return level+1
     *                  else if num < m:
     *                      q.offer(num)
     *          level++
     */

    public int BFS (int n, int m, int[] arr) {
        Queue<Integer> q = new LinkedList<>();

        int level = 0;
        q.offer(0);

        while (!q.isEmpty()) {
            int len = q.size();

            for (int i=0; i<len; i++) {
                int sum = q.poll();

                for (int k=0; k<arr.length; k++) {
                    int num = sum + arr[k];
                    if (num == m) {
                        return level+1;

                    }else if (num < m) {
                        q.offer(num);
                    }
                }
            }
            level++;
        }

        return -1;
    }

    public static void main(String[] args) {

        //Input:    3
        //          1 2 5
        //          15
        //Output:   3

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        int n = kb.nextInt();
        int[] arr = new int[n];

        for (int i=0; i<n; i++) {
            arr[i] = kb.nextInt();
        }

        int m = kb.nextInt();

        System.out.println(T.BFS(n, m, arr));

    }
}