package basic.inflearn;

import java.util.Scanner;

public class Main {

    /*
     * new dx <- {-1, 1, 0, 0, -1, 1, -1, 1}; //상하좌우 정대각 엇대각
     * new dy <- {0, 0, -1, 1, -1, 1, 1, -1}; //상하좌우 정대각 엇대각
     *
     * DFS(x, y board):
     *      for i ~ 8:
     *          _x <- x + dx[i]
     *          _y <- y + dy[i]
     *
     *          if _x>-1 and _x<board.length and _y>-1 and _y<board.length and board[_x][_y]==1:
     *              board[_x][_y] <- 0
     *              DFS(_x, _y, board)
     *
     * solution(n, board):
     *      answer <- 0
     *      for i ~ n:
     *          for j ~ n:
     *              if board[i][j] == 1:
     *                  board[i][j] <- 0
     *                  DFS(i, j, board)
     *                  answer++
     */

    int[] dx = {-1, 1, 0, 0, -1, 1, -1, 1};
    int[] dy = {0, 0, -1, 1, -1, 1, 1, -1};

    public void DFS (int x, int y, int[][] board) {
        for (int i=0; i<8; i++) {
            int _x = x + dx[i];
            int _y = y + dy[i];

            if (_x>-1 && _x< board.length && _y>-1 && _y< board.length && board[_x][_y] == 1) {
                board[_x][_y] = 0;
                DFS(_x, _y, board);
            }
        }
    }

    public int solution (int n, int[][] board) {
        int answer = 0;

        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                if (board[i][j] == 1) {
                    board[i][j] = 0;
                    DFS(i, j, board);
                    answer++;
                }
            }
        }

        return answer;
    }

    public static void main(String[] args) {

        //Input:    7
        //          1 1 0 0 0 1 0
        //          0 1 1 0 1 1 0
        //          0 1 0 0 0 0 0
        //          0 0 0 1 0 1 1
        //          1 1 0 1 1 0 0
        //          1 0 0 0 1 0 0
        //          1 0 1 0 1 0 0
        //Output:   5

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        int n = kb.nextInt();
        int[][] board = new int[n][n];

        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                board[i][j] = kb.nextInt();
            }
        }

        System.out.println(T.solution(n, board));

    }
}