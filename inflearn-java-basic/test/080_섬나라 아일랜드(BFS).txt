package basic.inflearn;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

    /*
     * new dx <- {-1, 1, 0, 0, -1, 1, -1, 1}; //상하좌우 정대각 엇대각
     * new dy <- {0, 0, -1, 1, -1, 1, 1, -1}; //상하좌우 정대각 엇대각
     * new Point(int x, int y)
     *
     * BFS(x, y, board):
     *      new Queue<Point> q
     *      q.offer(new Point(x, y))
     *
     *      while q.isNotEmpty():
     *          cur <- q.poll()
     *          for i ~ 8:
     *              _x <- cur.x + dx[i]
     *              _y <- cur.y + dy[i]
     *              if _x>-1 and _x<board.length and _y>-1 and _y<board.length and board[_x][_y]==1:
     *                  board[_x][_y] <- 0
     *                  q.offer(new Point(_x, _y)
     *
     *
     * solution(n, board):
     *      answer <- 0
     *      for i ~ n:
     *          for j ~ n:
     *              if board[i][j] == 1:
     *                  board[i][j] <- 0
     *                  BFS(i, j, board)
     *                  answer++
     */

    class Point {
        int x;
        int y;
        Point (int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    int[] dx = {-1, 1, 0, 0, -1, 1, -1, 1};
    int[] dy = {0, 0, -1, 1, -1, 1, 1, -1};

    public void BFS (int x, int y, int[][] board) {
        Queue<Point> q = new LinkedList<>();

        q.offer(new Point(x, y));

        while (!q.isEmpty()) {
            Point cur = q.poll();

            for (int i=0; i<8; i++) {
                int _x = cur.x + dx[i];
                int _y = cur.y + dy[i];

                if (_x>-1 && _x< board.length && _y>-1 && _y< board.length && board[_x][_y]==1) {
                    board[_x][_y] = 0;
                    q.offer(new Point(_x, _y));
                }
            }
        }
    }

    public int solution (int n, int[][] board) {
        int answer = 0;

        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                if (board[i][j] == 1) {
                    board[i][j] = 0;
                    BFS(i, j, board);
                    answer++;
                }
            }
        }

        return answer;
    }

    public static void main(String[] args) {

        //Input:    7
        //          1 1 0 0 0 1 0
        //          0 1 1 0 1 1 0
        //          0 1 0 0 0 0 0
        //          0 0 0 1 0 1 1
        //          1 1 0 1 1 0 0
        //          1 0 0 0 1 0 0
        //          1 0 1 0 1 0 0
        //Output:   5

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        int n = kb.nextInt();
        int[][] board = new int[n][n];

        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                board[i][j] = kb.nextInt();
            }
        }

        System.out.println(T.solution(n, board));

    }
}