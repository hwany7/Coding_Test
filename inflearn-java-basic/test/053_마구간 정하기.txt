package basic.inflearn;

import java.util.Arrays;
import java.util.Scanner;

public class Main {

    /*
     * arr.sort()
     * lt <- 1
     * rt <- arr[n-1]
     *
     * while lt <= rt:
     *      mid <- (lt+rt) / 2
     *      if count(arr, mid) >= c:
     *          answer = mid
     *          lt = mid + 1
     *      else:
     *          rt = mid - 1
     * return answer
     *
     * function count(arr, mid) return int:
     *      cnt <- 1
     *      dit arr[n-1] - arr[0]
     *      for i=1 ~ n:
     *          if arr[i]-dit >= mid:
     *              cnt++
     *              dit = arr[i]
     *      return cnt
     */


    public int solution(int n, int c, int[] arr) {
        int answer = 0;

        Arrays.sort(arr);

        int lt = 1;
        int rt = arr[n-1] - arr[0];

        while(lt <= rt){
            int mid = (lt+rt) / 2;
            if(count(arr, mid) >= c){
                answer = mid;
                lt = mid + 1;
            }
            else rt = mid - 1;
        }

        return answer;
    }

    public int count(int[] arr, int mid){
        int cnt = 1;
        int dit = arr[0];

        for(int i=1; i<arr.length; i++){
            if((arr[i]-dit) >= mid){
                cnt++;
                dit = arr[i];
            }
        }
        return cnt;
    }

    public static void main(String[] args) {

        //Input:    5 3
        //          1 2 8 4 9
        //Output:   3

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        int n = kb.nextInt();
        int c = kb.nextInt();
        int[] arr = new int[n];

        for(int i=0; i<n; i++){
            arr[i] = kb.nextInt();
        }

        System.out.println(T.solution(n, c, arr));

    }

}