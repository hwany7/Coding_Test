package basic.inflearn;

import java.util.Scanner;

public class Main {

    /* new int[] arr
     * DFS(n):
     *      if arr[n] > 0:
     *          return arr[n]
     *      if n==1 or n==2:
     *          return arr[n] <- 1
     *      else:
     *          return arr[n] <- DFS(n-2) + DFS(n-1)
     */

    static int[] arr;
    public int DFS(int n){
        if(arr[n] > 0) return arr[n]; //메모이제이션

        if(n==1 || n==2) return arr[n] = 1;
        else{
            return arr[n] = DFS(n-2) + DFS(n-1);
        }
    }

    /**
     * 재귀를 사용할때 단점은 n의 수가 커지면
     * 재귀되는 함수의 수가 기하급수적으로 늘어난다는 것이다
     *
     * 그런데 재귀를 잘 살펴보면, 중복된 호출들이 굉장히 많다
     * 예를들어 DFS(10)을 호출하면 DFS(7)같은 중복된 부분이 많이 생기는데
     * 이것또한 모두 재귀로 호출하기 때문에 시간이 오래걸린다
     *
     * (EX)
     * DFS(10): return DFS(9) + DFS(8)
     *      DFS(9): return DFS(8) + DFS(7)
     *      DFS(8): return DFS(7) + DFS(6)
     *          .....
     *
     * 그런데 만약 이미구한 정보는 저장해놓고, 없을 경우에만 재귀를 사용하면 어떨까?
     * DFS(7)을 이미한번 구했으므로, 그것을 그대로 사용하면 사실 문제는 해결된다
     * 이럴때 사용하는게, 메모이제이션 기법이다
     *
     */

    public static void main(String[] args) {

        //Input:    10
        //Output:   1 1 2 3 5 8 13 21 34 55

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        int n = kb.nextInt();
        arr = new int[n+1];
        T.DFS(n);

        for(int i=1; i<n+1; i++){
            System.out.print(arr[i] + " ");
        }
    }
}