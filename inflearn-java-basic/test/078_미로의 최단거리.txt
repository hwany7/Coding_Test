package basic.inflearn;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Point {
    int x;
    int y;

    Point (int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Main {

    /*
     * new Point(int x, int y)
     * new int[] dx <- {-1, 1, 0, 0}
     * new int[] dy <- {0, 0, -1, 1}
     *
     * BFS(x, y):
     *      new Queue q
     *      level <- 0
     *      q.offer(new Point(x, y))
     *
     *      while q.isNotEmpty():
     *              len <- q.size()
     *              for i ~ len:
     *                  cur <- q.poll()
     *                  for k ~ 4:
     *                      _x <- cur.x + dx[k]
     *                      _y <- cur.y + dy[k]
     *                      if _x>0 and _x<8 and _y>0 and _y<8 and board[_x][_y]==0:
     *                          board[_x][_y] <- 1
     *                          if _x==7 and _y==7:
     *                              return level+1
     *                          q.offer(new Point(_x, _y)
     *              level++
     */

    static int[][] board;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};

    public int BFS (int x, int y) {
        Queue<Point> q = new LinkedList<>();

        int level = 0;
        q.offer(new Point(x, y));

        while (!q.isEmpty()) {
            int len = q.size();
            for (int i=0; i<len; i++) {
                Point cur = q.poll();

                for (int k=0; k<4; k++) {
                    int _x = cur.x + dx[k];
                    int _y = cur.y + dy[k];

                    if (_x>0 && _x<8 && _y>0 && _y<8 && board[_x][_y]==0) {
                        board[_x][_y] = 1;
                        if (_x==7 && _y==7) return level+1;
                        q.offer(new Point(_x, _y));
                    }
                }
            }
            level++;
        }

        return -1;
    }

    public static void main(String[] args) {

        //Input:    0 0 0 0 0 0 0
        //          0 1 1 1 1 1 0
        //          0 0 0 1 0 0 0
        //          1 1 0 1 0 1 1
        //          1 1 0 0 0 0 1
        //          1 1 0 1 1 0 0
        //          1 0 0 0 0 0 0
        //Output:   12

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        board = new int[8][8];
        for (int i=1; i<8; i++) {
            for (int j=1; j<8; j++) {
                board[i][j] = kb.nextInt();
            }
        }

        board[1][1] = 1;

        System.out.println(T.BFS(1, 1));

    }
}