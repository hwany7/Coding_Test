package basic.inflearn;

import java.util.*;

public class Main {

    /*
     * new Point(int x, int y)
     *
     * answer <- MAX_VALUE
     * comb
     * pizza, house
     *
     * DFS(level, start, m):
     *      if level == m:
     *          sum <- 0
     *          for h in house:
     *              dix <- MAX_VALUE
     *              for i in comb:
     *                  dis <- min( dis, dbs(h.x-pizza.get(i).x) - dbs(h.y-pizza.get(i).y) )
     *              sum += dis
     *          answer <- min(answer, sum)
     *
     * solution(n, m, board):
     *      new comb int[m]
     *      new ArrayList pizza
     *      new ArrayList house
     *
     *      for i ~ n:
     *          for j ~ n:
     *              if board[i][j] == 1:
     *                  house.add(new Point(i, j))
     *              else if board[i][j] == 2:
     *                  pizza.add(new Point(i, j))
     *      DFS(0, 0, m)
     *
     */

    class Point {
        int x;
        int y;
        Point (int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    int answer = Integer.MAX_VALUE;
    int[] comb;
    ArrayList<Point> pizza;
    ArrayList<Point> house;

    public void DFS (int level, int start, int m) {
        if (level == m) {
            int sum = 0;
            for (Point h : house) {
                int dis = Integer.MAX_VALUE;

                for(int i : comb) {
                    dis = Math.min( dis, Math.abs(h.x-pizza.get(i).x) + Math.abs(h.y-pizza.get(i).y) );
                }
                sum += dis;
            }
            answer = Math.min(answer, sum);
        }else {
            for (int i=start; i<pizza.size(); i++) {
                comb[level] = i;
                DFS(level+1, i+1, m);
            }
        }
    }

    public int solution (int n, int m, int[][] board) {
        comb = new int[m];
        pizza = new ArrayList<>();
        house = new ArrayList<>();

        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                if (board[i][j] == 1) house.add(new Point(i, j));
                else if (board[i][j] == 2) pizza.add(new Point(i, j));
            }
        }

        DFS(0,0, m);

        return answer;
    }

    public static void main(String[] args) {

        //Input:    4 4
        //          0 1 2 0
        //          1 0 2 1
        //          0 2 1 2
        //          2 0 1 2
        //Output:   6

        Main T = new Main();
        Scanner kb = new Scanner(System.in);

        int n = kb.nextInt(); //4
        int m = kb.nextInt(); //4
        int[][] board = new int[n][n];

        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                board[i][j] = kb.nextInt();
            }
        }
        System.out.println(T.solution(n, m, board));

    }
}